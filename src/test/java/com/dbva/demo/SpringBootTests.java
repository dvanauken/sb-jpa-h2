package com.dbva.demo;

import com.dbva.demo.model.AppUser;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc //annotation tells Spring Boot to automatically configure a MockMvc instance which can then be autowired into your test class. This should resolve the NoSuchBeanDefinitionException you are seeing.
class SpringBootTests {

    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    void printTestName(TestInfo testInfo) {
        System.out.println("\nRunning test: " + testInfo.getDisplayName());
    }

    @Test
        //basic sanity check generated by Spring Boot when you create a new project. It checks that your application context can start up correctly. You don't need to specify anything inside this method. If your application context has any issues (like a missing bean or a configuration error), this test will fail.
    void contextLoads() {
    }


    @Test
    void testGetAllAppUsersNoParams() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/app-users"))
                .andExpect(status().isOk());
    }

    @Test
    void testGetAllAppUsersWithPageAndSize() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/app-users?page=1&size=10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content.length()").value(10))
                .andDo(print());
    }

    @Test
    void testGetAppUsersWithSurnameAnderson() throws Exception {
        AppUser exampleUser = new AppUser();
        exampleUser.setSurname("Anderson");

        mockMvc.perform(MockMvcRequestBuilders.post("/api/app-users")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(new ObjectMapper().writeValueAsString(exampleUser)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[?(@.surname == 'Anderson')]").exists())
                .andDo(print());
    }
}
